package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"image/color"
	"log"
	"math"
	"net"
	"os"
	"sync"
	"time"

	"github.com/hajimehoshi/ebiten/v2"
	"github.com/hajimehoshi/ebiten/v2/ebitenutil"
)

const (
	ScreenWidth   = 800
	ScreenHeight  = 600
	PlayerSpeed   = 3.0
	BulletSpeed   = 6.0
	PlayerRadius  = 10.0
	BulletRadius  = 3.0
	MaxHealth     = 100
	ShootCooldown = 200 * time.Millisecond
	ServerPort    = ":8080"
)

type Player struct {
	ID       string    `json:"id"`
	X        float64   `json:"x"`
	Y        float64   `json:"y"`
	Angle    float64   `json:"angle"`
	Health   int       `json:"health"`
	Bullets  []*Bullet `json:"bullets"`
	lastShot time.Time `json:"-"`
}

type Bullet struct {
	OwnerID string  `json:"owner_id"`
	X       float64 `json:"x"`
	Y       float64 `json:"y"`
	DX      float64 `json:"dx"`
	DY      float64 `json:"dy"`
}

type Game struct {
	player  *Player
	players map[string]*Player
	conn    net.Conn
	mu      sync.Mutex
}

type PlayerUpdate struct {
	Players map[string]*Player `json:"players"`
}

func NewPlayer(id string, x, y float64) *Player {
	return &Player{
		ID:      id,
		X:       x,
		Y:       y,
		Health:  MaxHealth,
		Bullets: []*Bullet{},
	}
}

func (p *Player) Update() {
	if p.Health <= 0 {
		return
	}

	if ebiten.IsKeyPressed(ebiten.KeyW) {
		p.Y -= PlayerSpeed
	}
	if ebiten.IsKeyPressed(ebiten.KeyS) {
		p.Y += PlayerSpeed
	}
	if ebiten.IsKeyPressed(ebiten.KeyA) {
		p.X -= PlayerSpeed
	}
	if ebiten.IsKeyPressed(ebiten.KeyD) {
		p.X += PlayerSpeed
	}

	mx, my := ebiten.CursorPosition()
	dx, dy := float64(mx)-p.X, float64(my)-p.Y
	p.Angle = math.Atan2(dy, dx)

	if ebiten.IsMouseButtonPressed(ebiten.MouseButtonLeft) && time.Since(p.lastShot) > ShootCooldown {
		p.Shoot()
		p.lastShot = time.Now()
	}

	for i := len(p.Bullets) - 1; i >= 0; i-- {
		p.Bullets[i].Update()
		if p.Bullets[i].OutOfBounds() {
			p.Bullets = append(p.Bullets[:i], p.Bullets[i+1:]...)
		}
	}
}

func (p *Player) Shoot() {
	bullet := &Bullet{
		OwnerID: p.ID,
		X:       p.X + math.Cos(p.Angle)*PlayerRadius,
		Y:       p.Y + math.Sin(p.Angle)*PlayerRadius,
		DX:      math.Cos(p.Angle) * BulletSpeed,
		DY:      math.Sin(p.Angle) * BulletSpeed,
	}
	p.Bullets = append(p.Bullets, bullet)
}

func (b *Bullet) Update() {
	b.X += b.DX
	b.Y += b.DY
}

func (b *Bullet) OutOfBounds() bool {
	return b.X < 0 || b.X > ScreenWidth || b.Y < 0 || b.Y > ScreenHeight
}

func (g *Game) Update() error {
	g.mu.Lock()
	defer g.mu.Unlock()

	g.player.Update()
	g.checkBulletCollisions()
	g.sendGameStateUpdate()
	return nil
}

func (g *Game) checkBulletCollisions() {
	for _, otherPlayer := range g.players {
		if otherPlayer.Health <= 0 || otherPlayer.ID == g.player.ID {
			continue
		}
		for i := len(g.player.Bullets) - 1; i >= 0; i-- {
			bullet := g.player.Bullets[i]
			if bullet.OwnerID == g.player.ID && distance(bullet.X, bullet.Y, otherPlayer.X, otherPlayer.Y) < PlayerRadius+BulletRadius {
				otherPlayer.Health -= 20
				if otherPlayer.Health < 0 {
					otherPlayer.Health = 0
				}
				g.player.Bullets = append(g.player.Bullets[:i], g.player.Bullets[i+1:]...)
			}
		}
	}
}

func distance(x1, y1, x2, y2 float64) float64 {
	return math.Hypot(x2-x1, y2-y1)
}

func (g *Game) Draw(screen *ebiten.Image) {
	ebitenutil.DrawCircle(screen, g.player.X, g.player.Y, PlayerRadius, color.RGBA{0, 255, 0, 255})
	ebitenutil.DebugPrint(screen, fmt.Sprintf("Health: %d", g.player.Health))

	for _, bullet := range g.player.Bullets {
		ebitenutil.DrawCircle(screen, bullet.X, bullet.Y, BulletRadius, color.RGBA{0, 255, 255, 255})
	}

	for _, player := range g.players {
		clr := color.RGBA{255, 0, 0, 255}
		if player.Health <= 0 {
			clr = color.RGBA{100, 100, 100, 255}
		}
		ebitenutil.DrawCircle(screen, player.X, player.Y, PlayerRadius, clr)
		ebitenutil.DebugPrintAt(screen, fmt.Sprintf("%s: %d HP", player.ID, player.Health), int(player.X-20), int(player.Y-30))

		for _, bullet := range player.Bullets {
			ebitenutil.DrawCircle(screen, bullet.X, bullet.Y, BulletRadius, color.RGBA{255, 255, 0, 255})
		}
	}
}

func (g *Game) Layout(_, _ int) (int, int) {
	return ScreenWidth, ScreenHeight
}

func (g *Game) sendGameStateUpdate() {
	update := PlayerUpdate{
		Players: g.players,
	}

	// Include self in players map for consistency
	update.Players[g.player.ID] = g.player

	data, err := json.Marshal(update)
	if err != nil {
		log.Println("Error marshaling game state update:", err)
		return
	}

	if _, err := g.conn.Write(append(data, '\n')); err != nil {
		log.Println("Error sending game state update:", err)
	}
}

func (g *Game) listenForUpdates() {
	reader := bufio.NewReader(g.conn)
	for {
		msg, err := reader.ReadString('\n')
		if err != nil {
			log.Println("Connection lost:", err)
			return
		}

		var update PlayerUpdate
		if err := json.Unmarshal([]byte(msg), &update); err != nil {
			log.Println("Error unmarshaling game state update:", err)
			continue
		}

		g.mu.Lock()
		for id, updatedPlayer := range update.Players {
			if id == g.player.ID {
				continue // Skip updating self from network
			}

			player, exists := g.players[id]
			if !exists {
				player = NewPlayer(updatedPlayer.ID, updatedPlayer.X, updatedPlayer.Y)
				g.players[id] = player
			}

			player.X = updatedPlayer.X
			player.Y = updatedPlayer.Y
			player.Angle = updatedPlayer.Angle
			player.Health = updatedPlayer.Health

			// Deep copy bullets to prevent race conditions
			player.Bullets = make([]*Bullet, len(updatedPlayer.Bullets))
			for i, b := range updatedPlayer.Bullets {
				player.Bullets[i] = &Bullet{
					OwnerID: b.OwnerID,
					X:       b.X,
					Y:       b.Y,
					DX:      b.DX,
					DY:      b.DY,
				}
			}
		}
		g.mu.Unlock()
	}
}

func startServer() {
	listener, err := net.Listen("tcp", ServerPort)
	if err != nil {
		log.Fatal("Failed to start server:", err)
	}
	defer listener.Close()
	log.Println("Server running on", ServerPort)

	clients := make(map[net.Conn]bool)
	var mu sync.Mutex

	for {
		conn, err := listener.Accept()
		if err != nil {
			log.Println("Connection error:", err)
			continue
		}

		mu.Lock()
		clients[conn] = true
		mu.Unlock()

		go func(c net.Conn) {
			reader := bufio.NewReader(c)
			for {
				msg, err := reader.ReadString('\n')
				if err != nil {
					log.Println("Client disconnected:", err)
					mu.Lock()
					delete(clients, c)
					mu.Unlock()
					return
				}

				mu.Lock()
				for client := range clients {
					if client != c {
						if _, writeErr := client.Write([]byte(msg)); writeErr != nil {
							log.Println("Error sending update to client:", writeErr)
						}
					}
				}
				mu.Unlock()
			}
		}(conn)
	}
}

func main() {
	if len(os.Args) > 1 && os.Args[1] == "server" {
		startServer()
		return
	}

	if len(os.Args) < 3 {
		fmt.Println("Usage: go run main.go <player_id> <server_ip:port>")
		return
	}

	playerID := os.Args[1]
	serverAddr := os.Args[2]

	conn, err := net.Dial("tcp", serverAddr)
	if err != nil {
		log.Fatal("Failed to connect to server:", err)
	}
	defer conn.Close()

	game := &Game{
		player:  NewPlayer(playerID, ScreenWidth/2, ScreenHeight/2),
		players: make(map[string]*Player),
		conn:    conn,
	}

	go game.listenForUpdates()

	ebiten.SetWindowSize(ScreenWidth, ScreenHeight)
	ebiten.SetWindowTitle("2D Multiplayer Top-Down Shooter")
	if err := ebiten.RunGame(game); err != nil {
		log.Fatal(err)
	}
}

